name: Build binaries & add as release assets

on:
  repository_dispatch:
    types: [trigger_binary_build]

jobs:
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      primary-version: ${{ steps.get-versions.outputs.primary-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.client_payload.ref }}
    
    - name: Get Python versions
      id: get-versions
      uses: ./.github/actions/get-python-versions

  build:
    needs: get-python-versions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            executable: opshin-linux
            executable_path: ./dist/opshin
          - os: macos-latest
            executable: opshin-macos
            executable_path: ./dist/opshin
          - os: windows-latest
            executable: opshin-windows.exe
            executable_path: .\dist\opshin.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.client_payload.ref }}

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ needs.get-python-versions.outputs.primary-version }}
        cache: "pip"

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
      shell: bash

    - name: Build Binary
      run: |
        pip install .  # Ensure your package and its dependencies are installed
        pyinstaller --name opshin --collect-all pycardano --collect-all blockfrost --collect-all uplc --collect-all opshin --noconfirm --onefile ./scripts/run_opshin.py
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.client_payload.upload_url }}
        asset_path: ${{ matrix.executable_path }}
        asset_name: ${{ matrix.executable }}
        asset_content_type: application/octet-stream

  generate-baseline:
    needs: get-python-versions
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.event.client_payload.ref }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ needs.get-python-versions.outputs.primary-version }}
        cache: "pip"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install project
      run: poetry install --no-interaction --with dev

    - name: Generate binary size baseline
      run: |
        python scripts/binary_size_tracker.py generate --baseline-file binary_sizes_baseline.json
        echo "Generated baseline with $(jq -r '.metadata.total_contracts' binary_sizes_baseline.json) contracts"

    - name: Upload baseline as release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.client_payload.upload_url }}
        asset_path: ./binary_sizes_baseline.json
        asset_name: binary_sizes_baseline.json
        asset_content_type: application/json
